import com.itextpdf.text.*
import com.itextpdf.text.pdf.PdfPCell
import com.itextpdf.text.pdf.PdfPTable
import com.itextpdf.text.pdf.PdfWriter
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*


class compra(idCompra:Int, idCliente:Int, NombreCliente:String, productosComprados:ArrayList<producto_comprado>){
    var idCompra = idCompra
    var idCliente = idCliente
    var NombreCliente = NombreCliente
    var productoComprados = productosComprados
    var urlPdf = ""
    var total = 0.0
    private val catFont: Font = Font(Font.FontFamily.HELVETICA, 18f,
            Font.BOLD)
    private val subFont: Font = Font(Font.FontFamily.HELVETICA, 16f,
            Font.BOLD)
    private val smallBold: Font = Font(Font.FontFamily.HELVETICA, 12f,
            Font.BOLD)
    private  val normFont: Font = Font(Font.FontFamily.HELVETICA, 14f, Font.NORMAL)

    //@author github.com/equetzal -> Enya
    init{
        productosComprados.forEach {
            total += it.precioFinalProductos
        }
        urlPdf = generarPdf()
    }

    private fun addEmptyLine(paragraph: Paragraph, number: Int) {
        for (i in 0 until number) {
            paragraph.add(Paragraph(" "))
        }
    }

    @Throws(DocumentException::class)
    private fun addTitlePage(document: Document) {
        val pattern = "dd/MM/yyyy"
        val simpleDateFormat = SimpleDateFormat(pattern)

        val date = simpleDateFormat.format(Date())
        val filename = "./res/tienditApp_logo_small.jpg"
        val image = Image.getInstance(filename)
        document.add(image)
        val preface = Paragraph()
        // We add one empty line
        addEmptyLine(preface, 1)
        // Lets write a big header
        addEmptyLine(preface, 1)
        // Will create: Report generated by: _name, _date
        preface.add(Paragraph(
                "Cliente: $NombreCliente",  //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                catFont))
        preface.add(Paragraph("NÃºmero de compra: $idCompra", smallBold))
        preface.add(Paragraph("Fecha de compra: " + date))
        addEmptyLine(preface, 2)
        document.add(preface)
    }

    @Throws(BadElementException::class)
    private fun createTable(document: Document) {
        val table = PdfPTable(5)

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);
        var c1 = PdfPCell(Phrase("Id de producto"))
        c1.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(c1)
        c1 = PdfPCell(Phrase("SKU"))
        c1.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(c1)
        c1 = PdfPCell(Phrase("Precio"))
        c1.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(c1)
        c1 = PdfPCell(Phrase("Cantidad"))
        c1.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(c1)
        c1 = PdfPCell(Phrase("Subtotal"))
        c1.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(c1)
        table.headerRows = 1
        productoComprados.forEach(){
            c1 = PdfPCell(Phrase(it.idProducto.toString()))
            c1.horizontalAlignment = Element.ALIGN_CENTER
            table.addCell(c1)
            c1 = PdfPCell(Phrase(it.SKUproducto))
            c1.horizontalAlignment = Element.ALIGN_CENTER
            table.addCell(c1)
            c1 = PdfPCell(Phrase(it.precioUnitario.toString()))
            c1.horizontalAlignment = Element.ALIGN_CENTER
            table.addCell(c1)
            c1 = PdfPCell(Phrase(it.cantidadProducto.toString()))
            c1.horizontalAlignment = Element.ALIGN_CENTER
            table.addCell(c1)
            c1 = PdfPCell(Phrase(it.precioFinalProductos.toString()))
            c1.horizontalAlignment = Element.ALIGN_CENTER
            table.addCell(c1)
        }
        c1 = PdfPCell(Phrase("Total"))
        c1.horizontalAlignment = Element.ALIGN_RIGHT
        c1.colspan = 4
        table.addCell(c1)
        c1 = PdfPCell(Phrase(total.toString()))
        c1.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(c1)
        table.widthPercentage = 100f
        document.add(table)
    }

    fun generarPdf() : String{
        val path = "./files/receipts/"
        val file = "$path$idCompra.pdf"
        val document = Document()
        PdfWriter.getInstance(document, FileOutputStream(file))

        document.open()
        addTitlePage(document)
        var paragraph = Paragraph()
        addEmptyLine(paragraph,2)

        createTable(document)
        document.add(paragraph)

        document.close()
        return file
    }


}